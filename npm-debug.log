0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs',
1 verbose cli   '/usr/bin/npm',
1 verbose cli   'install',
1 verbose cli   '-g',
1 verbose cli   'db-migrate' ]
2 info using npm@1.3.10
3 info using node@v0.10.25
4 verbose cache add [ 'db-migrate', null ]
5 verbose cache add name=undefined spec="db-migrate" args=["db-migrate",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'db-migrate',
6 verbose parsed url   path: 'db-migrate',
6 verbose parsed url   href: 'db-migrate' }
7 silly lockFile 0276ebc1-db-migrate db-migrate
8 verbose lock db-migrate /home/marcin/.npm/0276ebc1-db-migrate.lock
9 silly lockFile 0276ebc1-db-migrate db-migrate
10 silly lockFile 0276ebc1-db-migrate db-migrate
11 verbose addNamed [ 'db-migrate', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile 9ebf1326-db-migrate db-migrate@
14 verbose lock db-migrate@ /home/marcin/.npm/9ebf1326-db-migrate.lock
15 silly addNameRange { name: 'db-migrate', range: '*', hasData: false }
16 verbose url raw db-migrate
17 verbose url resolving [ 'https://registry.npmjs.org/', './db-migrate' ]
18 verbose url resolved https://registry.npmjs.org/db-migrate
19 info trying registry request attempt 1 at 21:00:38
20 http GET https://registry.npmjs.org/db-migrate
21 http 200 https://registry.npmjs.org/db-migrate
22 silly registry.get cb [ 200,
22 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
22 silly registry.get     etag: '"89JEA656YO1C3BHDICSORSTJX"',
22 silly registry.get     'content-type': 'application/json',
22 silly registry.get     'cache-control': 'max-age=60',
22 silly registry.get     'content-length': '91789',
22 silly registry.get     'accept-ranges': 'bytes',
22 silly registry.get     date: 'Mon, 11 May 2015 19:00:39 GMT',
22 silly registry.get     via: '1.1 varnish',
22 silly registry.get     age: '0',
22 silly registry.get     connection: 'keep-alive',
22 silly registry.get     'x-served-by': 'cache-fra1248-FRA',
22 silly registry.get     'x-cache': 'HIT',
22 silly registry.get     'x-cache-hits': '1',
22 silly registry.get     'x-timer': 'S1431370838.824823,VS0,VE422',
22 silly registry.get     vary: 'Accept' } ]
23 silly addNameRange number 2 { name: 'db-migrate', range: '*', hasData: true }
24 silly addNameRange versions [ 'db-migrate',
24 silly addNameRange   [ '0.0.1',
24 silly addNameRange     '0.0.2',
24 silly addNameRange     '0.0.3',
24 silly addNameRange     '0.0.4',
24 silly addNameRange     '0.0.5',
24 silly addNameRange     '0.0.6',
24 silly addNameRange     '0.1.0',
24 silly addNameRange     '0.1.1',
24 silly addNameRange     '0.1.2',
24 silly addNameRange     '0.1.3',
24 silly addNameRange     '0.1.4',
24 silly addNameRange     '0.1.5',
24 silly addNameRange     '0.2.0',
24 silly addNameRange     '0.2.1',
24 silly addNameRange     '0.2.2',
24 silly addNameRange     '0.2.3',
24 silly addNameRange     '0.2.4',
24 silly addNameRange     '0.2.5',
24 silly addNameRange     '0.2.6',
24 silly addNameRange     '0.2.7',
24 silly addNameRange     '0.2.8',
24 silly addNameRange     '0.3.0',
24 silly addNameRange     '0.3.1',
24 silly addNameRange     '0.3.2',
24 silly addNameRange     '0.4.0',
24 silly addNameRange     '0.4.1',
24 silly addNameRange     '0.4.2',
24 silly addNameRange     '0.5.0',
24 silly addNameRange     '0.5.1',
24 silly addNameRange     '0.5.2',
24 silly addNameRange     '0.5.3',
24 silly addNameRange     '0.5.4',
24 silly addNameRange     '0.6.0',
24 silly addNameRange     '0.6.1',
24 silly addNameRange     '0.6.2',
24 silly addNameRange     '0.6.3',
24 silly addNameRange     '0.6.4',
24 silly addNameRange     '0.7.0',
24 silly addNameRange     '0.7.1',
24 silly addNameRange     '0.8.0',
24 silly addNameRange     '0.9.0',
24 silly addNameRange     '0.9.1',
24 silly addNameRange     '0.9.2',
24 silly addNameRange     '0.9.3',
24 silly addNameRange     '0.9.4',
24 silly addNameRange     '0.9.5',
24 silly addNameRange     '0.9.7',
24 silly addNameRange     '0.9.8',
24 silly addNameRange     '0.9.9',
24 silly addNameRange     '0.9.10',
24 silly addNameRange     '0.9.11',
24 silly addNameRange     '0.9.12',
24 silly addNameRange     '0.9.13',
24 silly addNameRange     '0.9.14' ] ]
25 verbose addNamed [ 'db-migrate', '0.9.14' ]
26 verbose addNamed [ '0.9.14', '0.9.14' ]
27 silly lockFile bce79821-db-migrate-0-9-14 db-migrate@0.9.14
28 verbose lock db-migrate@0.9.14 /home/marcin/.npm/bce79821-db-migrate-0-9-14.lock
29 silly lockFile 889d9bff-db-migrate-db-migrate-0-9-14-tgz https://registry.npmjs.org/db-migrate/-/db-migrate-0.9.14.tgz
30 verbose lock https://registry.npmjs.org/db-migrate/-/db-migrate-0.9.14.tgz /home/marcin/.npm/889d9bff-db-migrate-db-migrate-0-9-14-tgz.lock
31 verbose addRemoteTarball [ 'https://registry.npmjs.org/db-migrate/-/db-migrate-0.9.14.tgz',
31 verbose addRemoteTarball   '3b2b79b31a842a46e8813d38c6bf640394c473a3' ]
32 info retry fetch attempt 1 at 21:00:39
33 verbose fetch to= /home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/tmp.tgz
34 http GET https://registry.npmjs.org/db-migrate/-/db-migrate-0.9.14.tgz
35 http 200 https://registry.npmjs.org/db-migrate/-/db-migrate-0.9.14.tgz
36 verbose tar unpack /home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/tmp.tgz
37 silly lockFile 5d743186-523-0-023739444790408015-package tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package
38 verbose lock tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package /home/marcin/.npm/5d743186-523-0-023739444790408015-package.lock
39 silly lockFile dc6df1a7-523-0-023739444790408015-tmp-tgz tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/tmp.tgz
40 verbose lock tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/tmp.tgz /home/marcin/.npm/dc6df1a7-523-0-023739444790408015-tmp-tgz.lock
41 silly gunzTarPerm modes [ '755', '644' ]
42 silly gunzTarPerm extractEntry package.json
43 silly gunzTarPerm extractEntry .npmignore
44 silly gunzTarPerm extractEntry README.md
45 silly gunzTarPerm extractEntry LICENSE
46 silly gunzTarPerm extractEntry index.js
47 silly gunzTarPerm extractEntry CONTRIBUTING.md
48 silly gunzTarPerm extractEntry .jshintrc
49 silly gunzTarPerm extractEntry .jshintignore
50 silly gunzTarPerm extractEntry bin/db-migrate
51 silly gunzTarPerm extractEntry .travis.yml
52 silly gunzTarPerm extractEntry lib/class.js
53 silly gunzTarPerm extractEntry lib/config.js
54 silly gunzTarPerm extractEntry lib/data_type.js
55 silly gunzTarPerm extractEntry lib/inflection.js
56 silly gunzTarPerm extractEntry lib/log.js
57 silly gunzTarPerm extractEntry lib/migration.js
58 silly gunzTarPerm extractEntry lib/migrator.js
59 silly gunzTarPerm extractEntry lib/util.js
60 silly gunzTarPerm extractEntry lib/driver/base.js
61 silly gunzTarPerm extractEntry lib/driver/index.js
62 silly gunzTarPerm extractEntry lib/driver/mongodb.js
63 silly gunzTarPerm extractEntry lib/driver/mysql.js
64 silly gunzTarPerm extractEntry lib/driver/pg.js
65 silly gunzTarPerm extractEntry lib/driver/postgres.js
66 silly gunzTarPerm extractEntry lib/driver/postgresql.js
67 silly gunzTarPerm extractEntry lib/driver/sqlite3.js
68 silly gunzTarPerm extractEntry CHANGELOG.md
69 silly lockFile 5d743186-523-0-023739444790408015-package tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package
70 silly lockFile 5d743186-523-0-023739444790408015-package tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package
71 silly lockFile dc6df1a7-523-0-023739444790408015-tmp-tgz tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/tmp.tgz
72 silly lockFile dc6df1a7-523-0-023739444790408015-tmp-tgz tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/tmp.tgz
73 verbose tar pack [ '/home/marcin/.npm/db-migrate/0.9.14/package.tgz',
73 verbose tar pack   '/home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package' ]
74 verbose tarball /home/marcin/.npm/db-migrate/0.9.14/package.tgz
75 verbose folder /home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package
76 silly lockFile 5d743186-523-0-023739444790408015-package tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package
77 verbose lock tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package /home/marcin/.npm/5d743186-523-0-023739444790408015-package.lock
78 silly lockFile 84608f8c-pm-db-migrate-0-9-14-package-tgz tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz
79 verbose lock tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz /home/marcin/.npm/84608f8c-pm-db-migrate-0-9-14-package-tgz.lock
80 silly lockFile 5d743186-523-0-023739444790408015-package tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package
81 silly lockFile 5d743186-523-0-023739444790408015-package tar:///home/marcin/tmp/npm-14051-l66nAFPt/1431370839523-0.023739444790408015/package
82 silly lockFile 84608f8c-pm-db-migrate-0-9-14-package-tgz tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz
83 silly lockFile 84608f8c-pm-db-migrate-0-9-14-package-tgz tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz
84 silly lockFile bf91096c-in-npm-db-migrate-0-9-14-package /home/marcin/.npm/db-migrate/0.9.14/package
85 verbose lock /home/marcin/.npm/db-migrate/0.9.14/package /home/marcin/.npm/bf91096c-in-npm-db-migrate-0-9-14-package.lock
86 silly lockFile bf91096c-in-npm-db-migrate-0-9-14-package /home/marcin/.npm/db-migrate/0.9.14/package
87 silly lockFile bf91096c-in-npm-db-migrate-0-9-14-package /home/marcin/.npm/db-migrate/0.9.14/package
88 verbose tar unpack /home/marcin/.npm/db-migrate/0.9.14/package.tgz
89 silly lockFile 5c5d65d8-in-npm-db-migrate-0-9-14-package tar:///home/marcin/.npm/db-migrate/0.9.14/package
90 verbose lock tar:///home/marcin/.npm/db-migrate/0.9.14/package /home/marcin/.npm/5c5d65d8-in-npm-db-migrate-0-9-14-package.lock
91 silly lockFile 84608f8c-pm-db-migrate-0-9-14-package-tgz tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz
92 verbose lock tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz /home/marcin/.npm/84608f8c-pm-db-migrate-0-9-14-package-tgz.lock
93 silly gunzTarPerm modes [ '755', '644' ]
94 silly gunzTarPerm extractEntry package.json
95 silly gunzTarPerm extractEntry .npmignore
96 silly gunzTarPerm extractEntry README.md
97 silly gunzTarPerm extractEntry LICENSE
98 silly gunzTarPerm extractEntry index.js
99 silly gunzTarPerm extractEntry CHANGELOG.md
100 silly gunzTarPerm extractEntry CONTRIBUTING.md
101 silly gunzTarPerm extractEntry .jshintrc
102 silly gunzTarPerm extractEntry .travis.yml
103 silly gunzTarPerm extractEntry bin/db-migrate
104 silly gunzTarPerm extractEntry lib/class.js
105 silly gunzTarPerm extractEntry lib/config.js
106 silly gunzTarPerm extractEntry lib/data_type.js
107 silly gunzTarPerm extractEntry lib/inflection.js
108 silly gunzTarPerm extractEntry lib/log.js
109 silly gunzTarPerm extractEntry lib/migration.js
110 silly gunzTarPerm extractEntry lib/migrator.js
111 silly gunzTarPerm extractEntry lib/util.js
112 silly gunzTarPerm extractEntry lib/driver/base.js
113 silly gunzTarPerm extractEntry lib/driver/index.js
114 silly gunzTarPerm extractEntry lib/driver/mongodb.js
115 silly gunzTarPerm extractEntry lib/driver/mysql.js
116 silly gunzTarPerm extractEntry lib/driver/pg.js
117 silly gunzTarPerm extractEntry lib/driver/postgres.js
118 silly gunzTarPerm extractEntry lib/driver/postgresql.js
119 silly gunzTarPerm extractEntry lib/driver/sqlite3.js
120 silly gunzTarPerm extractEntry .jshintignore
121 silly lockFile 5c5d65d8-in-npm-db-migrate-0-9-14-package tar:///home/marcin/.npm/db-migrate/0.9.14/package
122 silly lockFile 5c5d65d8-in-npm-db-migrate-0-9-14-package tar:///home/marcin/.npm/db-migrate/0.9.14/package
123 silly lockFile 84608f8c-pm-db-migrate-0-9-14-package-tgz tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz
124 silly lockFile 84608f8c-pm-db-migrate-0-9-14-package-tgz tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz
125 verbose chmod /home/marcin/.npm/db-migrate/0.9.14/package.tgz 644
126 verbose chown /home/marcin/.npm/db-migrate/0.9.14/package.tgz [ 1000, 1000 ]
127 silly lockFile 889d9bff-db-migrate-db-migrate-0-9-14-tgz https://registry.npmjs.org/db-migrate/-/db-migrate-0.9.14.tgz
128 silly lockFile 889d9bff-db-migrate-db-migrate-0-9-14-tgz https://registry.npmjs.org/db-migrate/-/db-migrate-0.9.14.tgz
129 silly lockFile bce79821-db-migrate-0-9-14 db-migrate@0.9.14
130 silly lockFile bce79821-db-migrate-0-9-14 db-migrate@0.9.14
131 silly lockFile 9ebf1326-db-migrate db-migrate@
132 silly lockFile 9ebf1326-db-migrate db-migrate@
133 silly resolved [ { name: 'db-migrate',
133 silly resolved     description: 'Database migration framework for node.js',
133 silly resolved     author: { name: 'Jeff Kunkle' },
133 silly resolved     bin: { 'db-migrate': './bin/db-migrate' },
133 silly resolved     keywords: [ 'database', 'db', 'migrate', 'migration', 'sqlite', 'mysql' ],
133 silly resolved     version: '0.9.14',
133 silly resolved     engines: { node: '>=0.6.0' },
133 silly resolved     bugs: { url: 'https://github.com/kunklejr/node-db-migrate/issues' },
133 silly resolved     license: 'MIT',
133 silly resolved     repository:
133 silly resolved      { type: 'git',
133 silly resolved        url: 'https://github.com/kunklejr/node-db-migrate.git' },
133 silly resolved     dependencies:
133 silly resolved      { async: '~0.9.0',
133 silly resolved        dotenv: '~0.5.1',
133 silly resolved        'final-fs': '^1.6.0',
133 silly resolved        mkdirp: '~0.5.0',
133 silly resolved        moment: '~2.9.0',
133 silly resolved        mongodb: '^1.4.30',
133 silly resolved        mysql: '~2.5.4',
133 silly resolved        optimist: '~0.6.1',
133 silly resolved        'parse-database-url': '~0.2.2',
133 silly resolved        pg: '~4.2.0',
133 silly resolved        pkginfo: '~0.3.0',
133 silly resolved        semver: '~4.3.3',
133 silly resolved        sqlite3: '~3.0.4' },
133 silly resolved     devDependencies:
133 silly resolved      { code: '^1.3.0',
133 silly resolved        'db-meta': '~0.4.1',
133 silly resolved        lab: '^5.2.1',
133 silly resolved        rimraf: '~2.2.8',
133 silly resolved        vows: '0.8.0' },
133 silly resolved     scripts: { test: 'node node_modules/.bin/vows' },
133 silly resolved     readme: '[![Build Status](https://travis-ci.org/db-migrate/node-db-migrate.svg?branch=master)](https://travis-ci.org/db-migrate/node-db-migrate)\n[![Dependency Status](https://david-dm.org/db-migrate/node-db-migrate.svg)](https://david-dm.org/db-migrate/node-db-migrate)\n[![devDependency Status](https://david-dm.org/db-migrate/node-db-migrate/dev-status.svg)](https://david-dm.org/db-migrate/node-db-migrate#info=devDependencies)\n[![Documentation Status](https://readthedocs.org/projects/db-migrate/badge/?version=latest)](https://readthedocs.org/projects/db-migrate/?badge=latest)\n\n# db-migrate\n\nDatabase migration framework for node.js\n\n## Installation\n\n    $ npm install -g db-migrate\n\nDB-Migrate is now available to you via:\n\n    $ db-migrate\n\n### As local module\n\nWant to use db-migrate as local module?\n\n    $ npm install db-migrate\n\nDB-Migrate is now available to you via:\n\n    $ node node_modules/db-migrate/bin/db-migrate\n\n## Supported Databases\n\n* Mysql (https://github.com/felixge/node-mysql)\n* PostgreSQL (https://github.com/brianc/node-postgres)\n* sqlite3 (https://github.com/developmentseed/node-sqlite3)\n* Mongodb (https://github.com/mongodb/node-mongodb-native)\n\n## Usage\n\n```\nUsage: db-migrate [up|down|reset|create|db] [[dbname/]migrationName|all] [options]\n\nDown migrations are run in reverse run order, so migrationName is ignored for down migrations.\nUse the --count option to control how many down migrations are run (default is 1).\n\nOptions:\n  --env, -e                   The environment to run the migrations under.    [default: "dev"]\n  --migrations-dir, -m        The directory containing your migration files.  [default: "./migrations"]\n  --count, -c                 Max number of migrations to run.\n  --dry-run                   Prints the SQL but doesn\'t run it.              [boolean]\n  --verbose, -v               Verbose mode.                                   [default: false]\n  --config                    Location of the database.json file.             [default: "./database.json"]\n  --force-exit                Call system.exit() after migration run          [default: false]\n  --sql-file                  Create sql files for up and down.               [default: false]\n  --coffee-file               Create a coffeescript migration file            [default: false]\n  --migration-table           Set the name of the migration table.\n  --table, --migration-table                                                  [default: "migrations"]\n```\n\n## Creating Migrations\n\nTo create a migration, execute `db-migrate create` with a title. `node-db-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n```javascript\nexports.up = function (db, callback) {\n  callback();\n};\n\nexports.down = function (db, callback) {\n  callback();\n};\n```\n\nAll you have to do is populate these, invoking `callback()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ db-migrate create add-pets\n    $ db-migrate create add-owners\n\nThe first call creates `./migrations/20111219120000-add-pets.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable(\'pets\', {\n    id: { type: \'int\', primaryKey: true },\n    name: \'string\'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable(\'pets\', callback);\n};\n```\n\nThe second creates `./migrations/20111219120005-add-owners.js`, which we can populate:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable(\'owners\', {\n    id: { type: \'int\', primaryKey: true },\n    name: \'string\'\n  }, callback);\n};\n\nexports.down = function (db, callback) {\n  db.dropTable(\'owners\', callback);\n};\n```\n\nExecuting multiple statements against the database within a single migration requires a bit more care. You can either nest the migrations like:\n\n```javascript\nexports.up = function (db, callback) {\n  db.createTable(\'pets\', {\n    id: { type: \'int\', primaryKey: true },\n    name: \'string\'\n  }, createOwners);\n\n  function createOwners(err) {\n    if (err) { callback(err); return; }\n    db.createTable(\'owners\', {\n      id: { type: \'int\', primaryKey: true },\n      name: \'string\'\n    }, callback);\n  }\n};\n\nexports.down = function (db, callback) {\n  db.dropTable(\'pets\', function(err) {\n    if (err) { callback(err); return; }\n    db.dropTable(\'owners\', callback);\n  });\n};\n```\n\nor use the async library to simplify things a bit, such as:\n\n```javascript\nvar async = require(\'async\');\n\nexports.up = function (db, callback) {\n  async.series([\n    db.createTable.bind(db, \'pets\', {\n      id: { type: \'int\', primaryKey: true },\n      name: \'string\'\n    }),\n    db.createTable.bind(db, \'owners\', {\n      id: { type: \'int\', primaryKey: true },\n      name: \'string\'\n    });\n  ], callback);\n};\n\nexports.down = function (db, callback) {\n  async.series([\n    db.dropTable.bind(db, \'pets\'),\n    db.dropTable.bind(db, \'owners\')\n  ], callback);\n};\n```\n\n### Using files for sqls\n\nIf you prefer to use sql files for your up and down statements, you can use the `--sql-file` option to automatically generate these files and the javascript code that load them.\n\nFor example:\n\n    $ db-migrate create add-people --sql-file\n\nThis call creates 3 files:\n\n```\n./migrations/20111219120000-add-people.js\n./migrations/sqls/20111219120000-add-people-up.sql\n./migrations/sqls/20111219120000-add-people-down.sql\n```\n\nThe sql files will have the following content:\n```sql\n/* Replace with your SQL commands */\n```\n\nAnd the javascript file with the following code that load these sql files:\n\n```javascript\ndbm = dbm || require(\'db-migrate\');\nvar type = dbm.dataType;\nvar fs = require(\'fs\');\nvar path = require(\'path\');\n\nexports.up = function(db, callback) {\n  var filePath = path.join(__dirname + \'/sqls/20111219120000-add-people-up.sql\');\n  fs.readFile(filePath, {encoding: \'utf-8\'}, function(err,data){\n    if (err) return console.log(err);\n    db.runSql(data, function(err) {\n      if (err) return console.log(err);\n      callback();\n    });\n  });\n};\n\nexports.down = function(db, callback) {\n  var filePath = path.join(__dirname + \'/sqls/20111219120000-add-people-down.sql\');\n  fs.readFile(filePath, {encoding: \'utf-8\'}, function(err,data){\n    if (err) return console.log(err);\n    db.runSql(data, function(err) {\n      if (err) return console.log(err);\n      callback();\n    });\n  });\n};\n```\n\n** Making it as default **\n\nTo not need to always specify the `sql-file` option in your `db-migrate create` commands, you can set a property in your `database.json` as follows:\n\n```\n{\n    "dev": {\n      "host": "localhost",\n    ...\n  },\n    "sql-file" : true\n}\n```\n\n** Important - For MySQL users **\n\nIf you use MySQL, to be able to use multiple statements in your sql file, you have to set the property `multiple-statements: true` when creating the connection object. You can set it in your `database.json` as follows:\n\n```\n{\n    "dev": {\n    "host": "localhost",\n    "user": { "ENV" : "DB_USER" },\n    "password" : { "ENV" : "DB_PASS" },\n    "database": "database-name",\n    "driver": "mysql",\n    "multipleStatements": true\n  }\n}\n```\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence. A table named `migrations` will also be created in your database to track which migrations have been applied.\n\n      $ db-migrate up\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nSubsequent attempts to run these migrations will result in the following output\n\n      $ db-migrate up\n      [INFO] No migrations to run\n      [INFO] Done\n\nIf we were to create another migration using `db-migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ db-migrate up\n      [INFO] Processed migration 20111220120210-add-kennels\n      [INFO] Done\n\nYou can also run migrations incrementally by specifying a date substring. The example below will run all migrations created on or before December 19, 2011:\n\n      $ db-migrate up 20111219\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Processed migration 20111219120005-add-owners\n      [INFO] Done\n\nYou can also run a specific number of migrations with the -c option:\n\n      $ db-migrate up -c 1\n      [INFO] Processed migration 20111219120000-add-pets\n      [INFO] Done\n\nAll of the down migrations work identically to the up migrations by substituting the word `down` for `up`.\n\n## Configuration\n\ndb-migrate supports the concept of environments. For example, you might have a dev, test, and prod environment where you need to run the migrations at different times. Environment settings are loaded from a database.json file like the one shown below:\n\n```javascript\n{\n  "dev": {\n    "driver": "sqlite3",\n    "filename": "~/dev.db"\n  },\n\n  "test": {\n    "driver": "sqlite3",\n    "filename": ":memory:"\n  },\n\n  "prod": {\n    "driver": "mysql",\n    "user": "root",\n    "password": "root"\n  },\n\n  "pg": {\n    "driver": "pg",\n    "user": "test",\n    "password": "test",\n    "host": "localhost",\n    "database": "mydb",\n    "schema": "my_schema"\n  },\n\n  "mongo": {\n    "driver": "mongodb",\n    "database": "my_db",\n    "host": "localhost"\n  },\n\n  "other": "postgres://uname:pw@server.com/dbname"\n}\n```\n\nYou can also specify environment variables in your config file by using a special notation. Here is an example:\n```javascript\n{\n  "prod": {\n    "driver": "mysql",\n    "user": {"ENV": "PRODUCTION_USERNAME"},\n    "password": {"ENV": "PRODUCTION_PASSWORD"}\n  },\n}\n```\nIn this case, db-migrate will search your environment for variables\ncalled `PRODUCTION_USERNAME` and `PRODUCTION_PASSWORD`, and use those values for the corresponding configuration entry.\n\nNote that if the settings for an environment are represented by a single string that string will be parsed as a database URL.\n\nYou can pass the -e or --env option to db-migrate to select the environment you want to run migrations against. The --config option can be used to specify the path to your database.json file if it\'s not in the current working directory.\n\n    db-migrate up --config config/database.json -e prod\n\nThe above will run all migrations that haven\'t yet been run in the prod environment, grabbing the settings from config/database.json.\n\nAlternatively, you can specify a DATABASE_URL\nenvironment variable that will be used in place of the configuration\nfile settings. This is helpful for use with Heroku.\n\n## Multiple migration scopes\n\nYou can have multiple migration scopes, which are subfolders within your migrations folder. A scope gets called like the following:\n\n    $ db-migrate up:myScope\n\n#### Scope Configuration\n\nYou can also configure the scope to specify a sub configuration. Currently you can only define database and schema within this config.\n\nThis config file is used to tell db-migrate to switch to the `database` or\n`schema`. Databases is used for most databases, except **postgres**\nwhich needs the schema variable.\n\nIt\'s currently also not possible to switch the database over this config with **postgres**.\n\n```json\n{\n  "database": "test",\n  "schema": "test"\n}\n```\n## Defaults\n\n## Generic Datatypes\n\nThere is currently a small list of generic Datatypes you can use, to make your\nmigrations more database independent.\n\nFind the list of supported types [here](https://github.com/kunklejr/node-db-migrate/blob/master/lib/data_type.js).\n\n## Migrations API - SQL\n\nBelow are examples of all the different migrations supported by db-migrate. Please note that not all migrations are supported by all databases. For example, SQLite does not support dropping columns.\n\n### createTable(tableName, columnSpec, callback)\n\nCreates a new table with the specified columns.\n\n__Arguments__\n\n* tableName - the name of the table to create\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\n// with no table options\nexports.up = function (db, callback) {\n  db.createTable(\'pets\', {\n    id: { type: \'int\', primaryKey: true, autoIncrement: true },\n    name: \'string\'  // shorthand notation\n  }, callback);\n}\n\n// with table options\nexports.up = function (db, callback) {\n  db.createTable(\'pets\', {\n    columns: {\n      id: { type: \'int\', primaryKey: true, autoIncrement: true },\n      name: \'string\'  // shorthand notation\n    },\n    ifNotExists: true\n  }, callback);\n}\n```\n\n__Column Specs__\n\nThe following options are available on column specs\n\n* type - the column data type. Supported types can be found in lib/data_type.js\n* length - the column data length, where supported\n* primaryKey - true to set the column as a primary key. Compound primary keys are supported by setting the `primaryKey` option to true on multiple columns\n* autoIncrement - true to mark the column as auto incrementing\n* notNull - true to mark the column as non-nullable, omit it archive database default behavior and false to mark explicitly as nullable\n* unique - true to add unique constraint to the column\n* defaultValue - set the column default value\n* foreignKey - set a foreign key to the column\n\n__Column ForeignKey Spec Examples__\n\n**Note:** Currently only supported together with mysql!\n\n```javascript\nexports.up = function(db, callback) {\n\n  //automatic mapping, the mapping key resolves to the column\n  db.createTable( \'product_variant\',\n  {\n      id:\n      {\n        type: \'int\',\n        unsigned: true,\n        notNull: true,\n        primaryKey: true,\n        autoIncrement: true,\n        length: 10\n      },\n      product_id:\n      {\n        type: \'int\',\n        unsigned: true,\n        length: 10,\n        notNull: true,\n        foreignKey: {\n          name: \'product_variant_product_id_fk\',\n          table: \'product\',\n          rules: {\n            onDelete: \'CASCADE\',\n            onUpdate: \'RESTRICT\'\n          },\n          mapping: \'id\'\n        }\n      },\n  }, callback );\n};\n\nexports.up = function(db, callback) {\n\n  //explicit mapping\n  db.createTable( \'product_variant\',\n  {\n    id:\n    {\n      type: \'int\',\n      unsigned: true,\n      notNull: true,\n      primaryKey: true,\n      autoIncrement: true,\n      length: 10\n    },\n    product_id:\n    {\n      type: \'int\',\n      unsigned: true,\n      length: 10,\n      notNull: true,\n      foreignKey: {\n        name: \'product_variant_product_id_fk\',\n        table: \'product\',\n        rules: {\n          onDelete: \'CASCADE\',\n          onUpdate: \'RESTRICT\'\n        },\n        mapping: {\n          product_id: \'id\'\n        }\n      }\n    },\n  }, callback );\n};\n```\n\n### dropTable(tableName, [options,] callback)\n\nDrop a database table\n\n__Arguments__\n\n* tableName - name of the table to drop\n* options - table options\n* callback(err) - callback that will be invoked after dropping the table\n\n__Table Options__\n\n* ifExists - Only drop the table if it already exists\n\n### renameTable(tableName, newTableName, callback)\n\nRename a database table\n\n__Arguments__\n\n* tableName - existing table name\n* options - new table name\n* callback(err) - callback that will be invoked after renaming the table\n\n### addColumn(tableName, columnName, columnSpec, callback)\n\nAdd a column to a database table\n\n__Arguments__\n\n* tableName - name of table to add a column to\n* columnName - name of the column to add\n* columnSpec - a hash of column definitions\n* callback(err) - callback that will be invoked after adding the column\n\nColumn spec is the same as that described in createTable\n\n### removeColumn(tableName, columnName, callback)\n\nRemove a column from an existing database table\n\n* tableName - name of table to remove a column from\n* columnName - name of the column to remove\n* callback(err) - callback that will be invoked after removing the column\n\n### renameColumn(tableName, oldColumnName, newColumnName, callback)\n\nRename a column\n\n__Arguments__\n\n* tableName - table containing column to rename\n* oldColumnName - existing column name\n* newColumnName - new name of the column\n* callback(err) - callback that will be invoked after renaming the column\n\n### changeColumn(tableName, columnName, columnSpec, callback)\n\nChange the definition of a column\n\n__Arguments__\n\n* tableName - table containing column to change\n* columnName - existing column name\n* columnSpec - a hash containing the column spec\n* callback(err) - callback that will be invoked after changing the column\n\n### addIndex(tableName, indexName, columns, [unique], callback)\n\nAdd an index\n\n__Arguments__\n\n* tableName - table to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* unique - whether the index is unique (optional, default false)\n* callback(err) - callback that will be invoked after adding the index\n\n### addForeignKey\n\nAdds a foreign Key\n\n__Arguments__\n\n* tableName - table on which the foreign key gets applied\n* referencedTableName - table where the referenced key is located\n* keyName - name of the foreign key\n* fieldMapping - mapping of the foreign key to referenced key\n* rules - ondelete, onupdate constraints\n* callback(err) - callback that will be invoked after adding the foreign key\n\n__Example__\n\n```javascript\nexports.up = function (db, callback)\n{\n  db.addForeignKey(\'module_user\', \'modules\', \'module_user_module_id_foreign\',\n  {\n    \'module_id\': \'id\'\n  },\n  {\n    onDelete: \'CASCADE\',\n    onUpdate: \'RESTRICT\'\n  }, callback);\n};\n```\n\n### removeForeignKey\n\n__Arguments__\n\n* tableName - table in which the foreign key should be deleted\n* keyName - the name of the foreign key\n* options - object of options, see below\n* callback - callback that will be invoked once the foreign key was deleted\n\n__Options__\n\n* dropIndex (default: false) - deletes the index with the same name as the foreign key\n\n__Examples__\n\n```javascript\n//without options object\nexports.down = function (db, callback)\n{\n  db.removeForeignKey(\'module_user\', \'module_user_module_id_foreign\', callback);\n};\n\n//with options object\nexports.down = function (db, callback)\n{\n  db.removeForeignKey(\'module_user\', \'module_user_module_id_foreign\',\n  {\n    dropIndex: true,\n  }, callback);\n};\n```\n\n### insert(tableName, columnNameArray, valueArray, callback)\n\nInsert an item into a given column\n\n__Arguments__\n\n* tableName - table to insert the item into\n* columnNameArray - the array existing column names for each item being inserted\n* valueArray - the array of values to be inserted into the associated column\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n### removeIndex([tableName], indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* tableName - name of the table that has the index (Required for mySql)\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### runSql(sql, [params,] callback)\n\nRun arbitrary SQL\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err) - callback that will be invoked after executing the SQL\n\n### all(sql, [params,] callback)\n\nExecute a select statement\n\n__Arguments__\n\n* sql - the SQL query string, possibly with ? replacement parameters\n* params - zero or more ? replacement parameters\n* callback(err, results) - callback that will be invoked after executing the SQL\n\n## Migrations API - NoSQL\n\nBelow are examples of all the different migrations supported by db-migrate for NoSQL databases.\n\n### createCollection(collectionName, callback)\n\nCreates a new collection.\n\n__Arguments__\n\n* collectionName - the name of the collection to create\n* callback(err) - callback that will be invoked after table creation\n\n__Examples__\n\n```javascript\nexports.up = function (db, callback) {\n  db.createCollection(\'pets\', callback);\n}\n```\n\n### dropCollection(collectionName, callback)\n\nDrop a database collection\n\n__Arguments__\n\n* collectionName - name of the collection to drop\n* callback(err) - callback that will be invoked after dropping the collection\n\n### renameCollection(collectionName, newCollectionName, callback)\n\nRename a database table\n\n__Arguments__\n\n* collectionName - existing collection name\n* newCollectionName - new collection name\n* callback(err) - callback that will be invoked after renaming the collection\n\n### addIndex(collectionName, indexName, columns, unique, callback)\n\nAdd an index\n\n__Arguments__\n\n* collectionName - collection to add the index too\n* indexName - the name of the index\n* columns - an array of column names contained in the index\n* unique - whether the index is unique\n* callback(err) - callback that will be invoked after adding the index\n\n### removeIndex(collectionName, indexName, callback)\n\nRemove an index\n\n__Arguments__\n\n* collectionName - name of the collection that has the index\n* indexName - the name of the index\n* callback(err) - callback that will be invoked after removing the index\n\n### insert(collectionName, toInsert, callback)\n\nInsert an item into a given collection\n\n__Arguments__\n\n* collectionName - collection to insert the item into\n* toInsert - an object or array of objects to be inserted into the associated collection\n* callback(err) - callback that will be invoked once the insert has been completed.\n\n## Development\n\nThe following command runs the vows tests.\n\n```bash\nnpm test\n```\n\nRunning the tests requires a one-time setup of the **MySQL**, **MongoDB** and **Postgres** databases.\n\n```bash\nmysql -u root -e "CREATE DATABASE db_migrate_test;"\ncreatedb db_migrate_test\n```\n\nYou will also need to copy `test/db.config.example.json` to `test/db.config.json`\nand adjust appropriate to setup configuration for your database instances.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jeff Kunkle\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
133 silly resolved     readmeFilename: 'README.md',
133 silly resolved     _id: 'db-migrate@0.9.14',
133 silly resolved     dist: { shasum: '558254c55848b030c7290ee720a2854ffa8beee8' },
133 silly resolved     _from: 'db-migrate@',
133 silly resolved     _resolved: 'https://registry.npmjs.org/db-migrate/-/db-migrate-0.9.14.tgz' } ]
134 info install db-migrate@0.9.14 into /usr/local/lib
135 info installOne db-migrate@0.9.14
136 info /usr/local/lib/node_modules/db-migrate unbuild
137 verbose tar unpack /home/marcin/.npm/db-migrate/0.9.14/package.tgz
138 silly lockFile 0cbe60a3-ocal-lib-node-modules-db-migrate tar:///usr/local/lib/node_modules/db-migrate
139 verbose lock tar:///usr/local/lib/node_modules/db-migrate /home/marcin/.npm/0cbe60a3-ocal-lib-node-modules-db-migrate.lock
140 silly lockFile 84608f8c-pm-db-migrate-0-9-14-package-tgz tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz
141 verbose lock tar:///home/marcin/.npm/db-migrate/0.9.14/package.tgz /home/marcin/.npm/84608f8c-pm-db-migrate-0-9-14-package-tgz.lock
142 silly gunzTarPerm modes [ '755', '644' ]
143 error Error: EACCES, mkdir '/usr/local/lib/node_modules'
143 error  { [Error: EACCES, mkdir '/usr/local/lib/node_modules']
143 error   errno: 3,
143 error   code: 'EACCES',
143 error   path: '/usr/local/lib/node_modules',
143 error   fstream_type: 'Directory',
143 error   fstream_path: '/usr/local/lib/node_modules/db-migrate',
143 error   fstream_class: 'DirWriter',
143 error   fstream_stack:
143 error    [ '/usr/lib/nodejs/fstream/lib/writer.js:171:23',
143 error      '/usr/lib/nodejs/mkdirp/index.js:37:53',
143 error      'Object.oncomplete (fs.js:107:15)' ] }
144 error Please try running this command again as root/Administrator.
145 error System Linux 3.13.0-46-generic
146 error command "/usr/bin/nodejs" "/usr/bin/npm" "install" "-g" "db-migrate"
147 error cwd /home/marcin/Pulpit/CBB/blog
148 error node -v v0.10.25
149 error npm -v 1.3.10
150 error path /usr/local/lib/node_modules
151 error fstream_path /usr/local/lib/node_modules/db-migrate
152 error fstream_type Directory
153 error fstream_class DirWriter
154 error code EACCES
155 error errno 3
156 error stack Error: EACCES, mkdir '/usr/local/lib/node_modules'
157 error fstream_stack /usr/lib/nodejs/fstream/lib/writer.js:171:23
157 error fstream_stack /usr/lib/nodejs/mkdirp/index.js:37:53
157 error fstream_stack Object.oncomplete (fs.js:107:15)
158 verbose exit [ 3, true ]
